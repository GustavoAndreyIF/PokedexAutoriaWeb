/**
 * üõ†Ô∏è UTILS.JS - UTILIT√ÅRIOS COMPARTILHADOS DA POK√âDEX
 *
 * Conjunto de fun√ß√µes utilit√°rias usadas em toda a aplica√ß√£o.
 * Mant√©m o c√≥digo DRY (Don't Repeat Yourself) e organizado.
 *
 * Categorias de utilit√°rios:
 * - üé® Manipula√ß√£o de DOM
 * - üìù Formata√ß√£o de texto
 * - ‚è≥ Loading e estados
 * - üö® Tratamento de erros
 * - üîß Helpers gerais
 *
 */

/**
 * üõ†Ô∏è Objeto principal com todos os utilit√°rios
 * Organizados por categoria para f√°cil localiza√ß√£o
 */
const Utils = {
	// ========================================
	// üé® MANIPULA√á√ÉO DE DOM
	// ========================================

	/**
	 * üîç Encontra um elemento no DOM de forma segura
	 *
	 * @param {string} selector - Seletor CSS do elemento
	 * @param {Element} parent - Elemento pai (opcional)
	 * @returns {Element|null} Elemento encontrado ou null
     * @description
     * Tenta buscar um elemento usando querySelector.
	 */
	findElement(selector, parent = document) {
		try {
			return parent.querySelector(selector);
		} catch (error) {
			console.warn(`‚ö†Ô∏è Erro ao buscar elemento '${selector}':`, error);
			return null;
		}
	},

	/**
	 * üîç Encontra m√∫ltiplos elementos no DOM
	 *
	 * @param {string} selector - Seletor CSS dos elementos
	 * @param {Element} parent - Elemento pai (opcional)
	 * @returns {NodeList} Lista de elementos encontrados
     * @description
     * Tenta buscar m√∫ltiplos elementos usando querySelectorAll.
	 */
	findElements(selector, parent = document) {
		try {
			return parent.querySelectorAll(selector);
		} catch (error) {
			console.warn(`‚ö†Ô∏è Erro ao buscar elementos '${selector}':`, error);
			return [];
		}
	},

	/**
	 * üé® Limpa o conte√∫do de um elemento
	 *
	 * @param {Element|string} element - Elemento ou seletor
     * @description
     * Limpa o conte√∫do HTML de um elemento, removendo todos os filhos.
	 */
	clearElement(element) {
		const el = typeof element === "string" ? this.findElement(element) : element;
		if (el) {
			el.innerHTML = "";
		}
	},

	/**
	 * üëÄ Mostra um elemento (remove classe 'd-none')
	 *
	 * @param {Element|string} element - Elemento ou seletor
     * @description
     * Remove a classe 'd-none' de um elemento para torn√°-lo vis√≠vel.
	 */
	showElement(element) {
		const el = typeof element === "string" ? this.findElement(element) : element;
		if (el) {
			el.classList.remove("d-none");
			el.style.display = "";
		}
	},

	/**
	 * üôà Esconde um elemento (adiciona classe 'd-none')
	 *
	 * @param {Element|string} element - Elemento ou seletor
     * @description
     * Adiciona a classe 'd-none' a um elemento para escond√™-lo.
	 */
	hideElement(element) {
		const el = typeof element === "string" ? this.findElement(element) : element;
		if (el) {
			el.classList.add("d-none");
		}
	},

	// ========================================
	// üìù FORMATA√á√ÉO DE TEXTO
	// ========================================

	/**
	 * ‚ú® Capitaliza a primeira letra de uma string
	 *
	 * @param {string} text - Texto para capitalizar
	 * @returns {string} Texto capitalizado
     * @description
     * Capitaliza a primeira letra de uma string e converte o restante para min√∫sculas.
     * Se o texto for inv√°lido, retorna uma string vazia.
	 */
	capitalize(text) {
		if (!text || typeof text !== "string") return "";
		return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();
	},

	/**
	 * üéØ Formata o nome de um Pok√©mon
	 *
	 * Remove h√≠fens, capitaliza e trata casos especiais
	 *
	 * @param {string} name - Nome do Pok√©mon
	 * @returns {string} Nome formatado
     * @description
     * Remove h√≠fens, capitaliza e trata casos especiais como "nidoran-f    
	 */
	formatPokemonName(name) {
		if (!name) return "";

		// üîÑ Substituir h√≠fens por espa√ßos e capitalizar cada palavra
		return name
			.split("-")
			.map((word) => this.capitalize(word))
			.join(" ");
	},

	/**
	 * üî¢ Formata um n√∫mero com zeros √† esquerda
	 *
	 * @param {number} num - N√∫mero para formatar
	 * @param {number} digits - Quantidade de d√≠gitos (padr√£o: 3)
	 * @returns {string} N√∫mero formatado
     * @description
     * Formata um n√∫mero para ter uma quantidade fixa de d√≠gitos, preenchendo com zeros √† esquerda.
     * Por exemplo, 1 se torna "001" se digits for
	 */
	formatNumber(num, digits = 3) {
		return String(num).padStart(digits, "0");
	},

	/**
	 * üé® Formata tipo de Pok√©mon para exibi√ß√£o
	 *
	 * @param {string} type - Tipo do Pok√©mon
	 * @returns {string} Tipo formatado
     * @description
     * Capitaliza a primeira letra do tipo e converte o restante para min√∫sculas.
     * Capiataliza significa que a primeira letra √© mai√∫scula e o restante min√∫sculo.
	 */
	formatPokemonType(type) {
		return this.capitalize(type);
	},

	// ========================================
	// ‚è≥ LOADING E ESTADOS
	// ========================================

	/**
	 * ‚è≥ Exibe um spinner de loading em um elemento
	 *
	 * @param {Element|string} element - Elemento ou seletor
	 * @param {string} message - Mensagem opcional (padr√£o: "Carregando...")
     * @description
     * Exibe um spinner de loading com uma mensagem opcional.
	 */
	showLoading(element, message = "Carregando...") {
		const el = typeof element === "string" ? this.findElement(element) : element;
		if (!el) return;

		const loadingHtml = `
            <div class="d-flex flex-column align-items-center justify-content-center p-4">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="text-muted mb-0">${message}</p>
            </div>
        `;

		el.innerHTML = loadingHtml;
	},

	/**
	 * ‚úÖ Remove o loading de um elemento
	 *
	 * @param {Element|string} element - Elemento ou seletor
     * @description
     * Remove o spinner de loading de um elemento, limpando seu conte√∫do.
	 */
	hideLoading(element) {
		const el = typeof element === "string" ? this.findElement(element) : element;
		if (!el) return;

		// üîç Buscar e remover spinner
		const spinner = el.querySelector(".spinner-border");
		if (spinner) {
			spinner.closest(".d-flex").remove();
		}
	},

	/**
	 * üéØ Exibe um estado vazio (quando n√£o h√° dados)
	 *
	 * @param {Element|string} element - Elemento ou seletor
	 * @param {string} message - Mensagem de estado vazio
	 * @param {string} icon - √çcone para exibir (padr√£o: "üì≠")
     * @description
     * Exibe um estado vazio com uma mensagem e um √≠cone.
	 */
	showEmptyState(element, message = "Nenhum resultado encontrado", icon = "üì≠") {
		const el = typeof element === "string" ? this.findElement(element) : element;
		if (!el) return;

		const emptyHtml = `
            <div class="text-center p-5">
                <div class="display-1 mb-3">${icon}</div>
                <h3 class="text-muted">${message}</h3>
            </div>
        `;

		el.innerHTML = emptyHtml;
	},

	// ========================================
	// üö® TRATAMENTO DE ERROS
	// ========================================

	/**
	 * üö® Exibe uma mensagem de erro em um elemento
	 *
	 * @param {Element|string} element - Elemento ou seletor
	 * @param {string} message - Mensagem de erro
	 * @param {boolean} showRetry - Mostrar bot√£o de retry (padr√£o: true)
     * @description
     * Exibe uma mensagem de erro com op√ß√£o de retry.
     * Se showRetry for true, exibe um bot√£o para tentar novamente.
	 */
	showError(element, message, showRetry = true) {
		const el = typeof element === "string" ? this.findElement(element) : element;
		if (!el) return;

		const retryButton = showRetry
			? `
            <button class="btn btn-outline-danger mt-3" onclick="location.reload()">
                üîÑ Tentar Novamente
            </button>
        `
			: "";

		const errorHtml = `
            <div class="alert alert-danger text-center" role="alert">
                <div class="display-4 mb-3">üí•</div>
                <h4 class="alert-heading">Oops! Algo deu errado</h4>
                <p class="mb-3">${message}</p>
                ${retryButton}
            </div>
        `;

		el.innerHTML = errorHtml;
	},

	// ========================================
	// üîß HELPERS GERAIS
	// ========================================

	/**
	 * ‚è±Ô∏è Utilit√°rio para debounce (evita execu√ß√µes excessivas)
	 *
	 * @param {Function} func - Fun√ß√£o para executar
	 * @param {number} delay - Delay em milissegundos
	 * @returns {Function} Fun√ß√£o com debounce aplicado
     * @description
     * Aplica debounce a uma fun√ß√£o, evitando que ela seja chamada excessivamente.
     * √ötil para eventos como scroll ou resize.
     * Exemplo: debounce(() => console.log("Executado!"), 300);
	 */
	debounce(func, delay) {
		let timeoutId;
		return function (...args) {
			clearTimeout(timeoutId);
			timeoutId = setTimeout(() => func.apply(this, args), delay);
		};
	},

	/**
	 * üí§ Utilit√°rio para aguardar um tempo
	 *
	 * @param {number} ms - Milissegundos para aguardar
	 * @returns {Promise} Promise que resolve ap√≥s o tempo especificado
     * @description
     * Utilit√°rio para aguardar um tempo espec√≠fico em milissegundos.
     * Exemplo: await Utils.sleep(1000); // Aguarda 1 segundo
	 */
	sleep(ms) {
		return new Promise((resolve) => setTimeout(resolve, ms));
	},


	/**
	 * üîç Verifica se um valor √© v√°lido (n√£o null, undefined ou vazio)
	 *
	 * @param {any} value - Valor para verificar
	 * @returns {boolean} True se valor √© v√°lido
     * @description
     * Verifica se um valor √© v√°lido, ou seja, n√£o √© null, undefined ou vazio.
     * Exemplo: Utils.isValid("texto") // true, Utils.isValid("") // false
	 */
	isValid(value) {
		return value !== null && value !== undefined && value !== "";
	},

	/**
	 * üåê Constr√≥i uma URL com par√¢metros
	 *
	 * @param {string} base - URL base
	 * @param {Object} params - Par√¢metros para adicionar
	 * @returns {string} URL completa
     * @description
     * Constr√≥i uma URL com par√¢metros de consulta, garantindo que apenas valores v√°lidos sejam inclu√≠dos.
     * Exemplo: Utils.buildUrl("/api/pokemon", { id: 1, name: "pikachu" });
	 */
	buildUrl(base, params = {}) {
		const url = new URL(base, window.location.origin);

		Object.entries(params).forEach(([key, value]) => {
			if (this.isValid(value)) {
				url.searchParams.set(key, value);
			}
		});

		return url.toString();
	},

	/**
	 * üìä Obt√©m par√¢metros da URL atual
	 *
	 * @returns {Object} Objeto com os par√¢metros da URL
     * @description
     * Obt√©m os par√¢metros da URL atual como um objeto.
	 */
	getUrlParams() {
		const params = {};
		const urlParams = new URLSearchParams(window.location.search);

		for (const [key, value] of urlParams) {
			params[key] = value;
		}

		return params;
	},

	/**
	 * üé® Obt√©m cor CSS baseada no tipo do Pok√©mon
	 *
	 * @param {string} type - Tipo do Pok√©mon
	 * @returns {string} Valor da vari√°vel CSS ou cor hexadecimal
     * @description
     * Obt√©m a cor CSS baseada no tipo do Pok√©mon.
	 */
	getPokemonTypeColor(type) {
		const typeColors = {
			normal: "#9199a1",
			fire: "#ff9d55",
			water: "#4d91d7",
			electric: "#f3d33c",
			grass: "#61bb59",
			ice: "#71cfbe",
			fighting: "#cf4069",
			poison: "#aa6ac7",
			ground: "#db7645",
			flying: "#8ea9df",
			psychic: "#fb7075",
			bug: "#91c22e",
			rock: "#c7b78a",
			ghost: "#5568aa",
			dragon: "#0a6dc8",
			dark: "#595265",
			steel: "#598fa2",
			fairy: "#ef8fe7",
		};

		return typeColors[type?.toLowerCase()] || "#9199a1";
	},

	/**
	 * üé® Obt√©m vari√°vel CSS do tipo do Pok√©mon
	 *
	 * @param {string} type - Tipo do Pok√©mon
	 * @returns {string} Nome da vari√°vel CSS
     * @description
     * Obt√©m a vari√°vel CSS baseada no tipo do Pok√©mon.
	 */
	getPokemonTypeVariable(type) {
		const validTypes = [
			'normal', 'fire', 'water', 'electric', 'grass', 'ice', 
			'fighting', 'poison', 'ground', 'flying', 'psychic', 
			'bug', 'rock', 'ghost', 'dragon', 'dark', 'steel', 'fairy'
		];

		const typeKey = type?.toLowerCase();
		if (validTypes.includes(typeKey)) {
			return `var(--color-${typeKey})`;
		}

		return "var(--color-normal)";
	},
};

// ========================================
// üåç DISPONIBILIZAR GLOBALMENTE
// ========================================

// üåç Disponibilizar no objeto window para uso global
window.Utils = Utils;

// ========================================
// üì§ EXPORTA√á√ïES ES6
// ========================================

export default Utils;
