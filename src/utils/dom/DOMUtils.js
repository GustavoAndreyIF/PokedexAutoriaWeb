/**
 * üé® DOMUTILS.JS - UTILIT√ÅRIOS DE MANIPULA√á√ÉO DO DOM
 *
 * Fun√ß√µes para intera√ß√£o e manipula√ß√£o de elementos DOM
 */

const DOMUtils = {
	/**
	 * üîç Encontra um elemento no DOM de forma segura
	 * Aceita tanto IDs (sem #) quanto seletores CSS completos
	 */
	findElement(selector, parent = document) {
		try {
			// Se n√£o come√ßar com #, ., [, :, ou espa√ßo, assumir que √© um ID
			const normalizedSelector =
				selector.match(/^[#.\[:]/g) || selector.includes(" ")
					? selector
					: `#${selector}`;

			return parent.querySelector(normalizedSelector);
		} catch (error) {
			console.warn(`‚ö†Ô∏è Erro ao buscar elemento '${selector}':`, error);
			return null;
		}
	},

	/**
	 * üîç Encontra m√∫ltiplos elementos no DOM
	 */
	findElements(selector, parent = document) {
		try {
			return parent.querySelectorAll(selector);
		} catch (error) {
			console.warn(`‚ö†Ô∏è Erro ao buscar elementos '${selector}':`, error);
			return [];
		}
	},

	/**
	 * üé® Limpa o conte√∫do de um elemento
	 */
	clearElement(element) {
		const el = typeof element === "string" ? this.findElement(element) : element;
		if (el) {
			el.innerHTML = "";
		}
	},

	/**
	 * üëÄ Mostra um elemento (remove classe 'd-none')
	 */
	showElement(element) {
		const el = typeof element === "string" ? this.findElement(element) : element;
		if (el) {
			el.classList.remove("d-none");
			el.style.display = "";
		}
	},

	/**
	 * üôà Esconde um elemento (adiciona classe 'd-none')
	 */
	hideElement(element) {
		const el = typeof element === "string" ? this.findElement(element) : element;
		if (el) {
			el.classList.add("d-none");
		}
	},
};

export default DOMUtils;
