/**
 * üé¥ POKEMONCARD.JS - COMPONENTE DE CARD DE POK√âMON
 * Componente simples para renderizar cards de Pok√©mon na home.
 */

import { TextFormatter, PokemonTypes, DOMUtils } from "../utils/index.js";
import ImageManager from "../utils/ImageManager.js";

/**
 * üé¥ Componente para card de Pok√©mon
 *
 * Renderiza um card Bootstrap simples com informa√ß√µes b√°sicas do Pok√©mon

 */
class PokemonCard {
	/**
	 * Construtor do componente
	 * @param {Object} pokemon - Dados do Pok√©mon
	 */
	constructor(pokemon) {
		this.pokemon = pokemon;
		this.element = null;
	}

	/**
	 * üé® Renderiza o HTML do card
	 * * Utiliza desestrutura√ß√£o para facilitar o acesso aos dados do Pok√©mon
	 * @returns {string} HTML do card
	 * @param {Object} pokemon - Dados do Pok√©mon
	 * @returns {string} HTML do card
	 */
	render() {
		const { id, name, images, types } = this.pokemon; // Desestrutura√ß√£o para facilitar o acesso

		// üî¢ Formatar n√∫mero da Pok√©dex
		const pokedexNumber = TextFormatter.formatNumber(id, 3);

		// üé® Formatear nome
		const formattedName = TextFormatter.formatPokemonName(name);

		// üñºÔ∏è Imagem principal (preferir official-artwork, fallback para front)
		const pokemonImage = images?.official || images?.front || "";

		// üé® Tipo principal para o background
		const primaryType = types[0]?.name || "normal";

		// üè∑Ô∏è Criar badges dos tipos com emojis
		const typeBadges = this._renderTypeBadgesWithEmojis(types);

		// üé® Background usando imagem do backgroundCard
		const backgroundInfo = ImageManager.getTypeBackgroundImage(primaryType);

		return `
            <div class="col-12 col-sm-6 col-lg-4 col-xl-3 mb-2">
                <div class="card pokemon-card h-100 pokemon-type-${primaryType}"
                     data-pokemon-id="${id}" 
                     data-pokemon-type="${primaryType}">

                    <!-- Fundo baseado no tipo -->
                    <div class="pokemon-card__background"
                         style="background-image: url('${backgroundInfo.imagePath}');"></div>

                    <div class="card-body pokemon-card__body">
                        <div class="pokemon-card__info">
                            <!-- N√∫mero da Pok√©dex -->
                            <span class="badge pokemon-card__number mb-1">
                                #${pokedexNumber}
                            </span>

                            <!-- Nome do Pok√©mon -->
                            <h5 class="card-title pokemon-card__name">
                                ${formattedName}
                            </h5>

                            <!-- Tipos -->
                            <div class="pokemon-card__types">
                                ${typeBadges}
                            </div>
                        </div>

                        <!-- Sprite do Pok√©mon -->
                        <div class="pokemon-card__sprite-container">
                            ${
								pokemonImage
									? `<img src="${pokemonImage}" 
                                        alt="${formattedName}" 
                                        class="pokemon-card__sprite">`
									: `<div class="pokemon-card__sprite-fallback">‚ùì</div>`
							}
                        </div>
                    </div>
                </div>
            </div>
        `;
	}

	/**
	 * üè∑Ô∏è Renderiza badges dos tipos
	 * @param {Array} types - Array de tipos do Pok√©mon
	 * @returns {string} HTML dos badges
	 * @private
	 */
	_renderTypeBadgesWithEmojis(types) {
		return types
			.map((type) => {
				const typeName = type.name;
				const typeColor = PokemonTypes.getColor(typeName);
				const iconPath = PokemonTypes.getIconPath(typeName);
				const displayName = TextFormatter.capitalize(typeName);

				return `
					<span class="badge pokemon-type-badge"
						  style="background-color: ${typeColor};">
						<img src="${iconPath}" 
							 alt="${typeName}" 
							 class="pokemon-type-badge__icon"
							 onerror="this.style.display='none';">
						${displayName}
					</span>
				`;
			})
			.join("");
	}

	/**
	 * üéØ Cria o elemento DOM e adiciona event listeners
	 * * @description
	 * Monta o card no container especificado e adiciona os eventos necess√°rios.
	 * * Utiliza o m√©todo `insertAdjacentHTML` para inserir o HTML do card.
	 * * O elemento DOM criado √© armazenado na propriedade `element` para refer√™ncia futura.
	 * * Adiciona um event listener de click para navegar para a p√°gina de detalhes do Pok√©mon.
	 * @param {Element} container - Container onde inserir o card
	 * @returns {Element} Elemento DOM criado
	 */
	mount(container) {
		// üé® Criar HTML
		const cardHtml = this.render();

		// üìù Inserir no container
		container.insertAdjacentHTML("beforeend", cardHtml);

		// üîç Encontrar o elemento criado
		this.element = container.lastElementChild.querySelector("[data-pokemon-id]");

		// üëÇ Adicionar event listeners
		this._attachEvents();

		return this.element;
	}

	/**
	 * üëÇ Adiciona event listeners ao card
	 * * * Adiciona um listener de click para navegar para a p√°gina de detalhes do Pok√©mon.
	 * * * Utiliza o m√©todo `_navigateToDetails` para realizar a navega√ß√£o.
	 * * * Verifica se o elemento DOM j√° foi criado antes de adicionar os eventos.
	 * * * Evita erros caso o card ainda n√£o tenha sido montado.
	 * @private
	 */
	_attachEvents() {
		if (!this.element) return;

		// üñ±Ô∏è Click para navegar para detalhes
		this.element.addEventListener("click", () => {
			this._navigateToDetails();
		});

	}

	/**
	 * üéØ Navega para p√°gina de detalhes do Pok√©mon
	 * * * Utiliza a fun√ß√£o global `pokeDexApp.goToDetails` se dispon√≠vel, sen√£o navega diretamente.
	 * * * Loga a navega√ß√£o para debug.
	 * * * Usa o ID do Pok√©mon para construir a URL de detalhes.
	 * * * Se a fun√ß√£o global n√£o estiver dispon√≠vel, usa `window.location.href` para navegar.
	 * * * Garante que a navega√ß√£o funcione mesmo sem o app global.
	 * * * Evita erros caso a fun√ß√£o n√£o exista.
	 * @private
	 */
	_navigateToDetails() {
		const pokemonId = this.pokemon.id;

		// üìä Log para debug
		console.log(`üéØ Navegando para detalhes do Pok√©mon #${pokemonId}`);

		// üåê Usar a fun√ß√£o global se dispon√≠vel, sen√£o navega√ß√£o direta
		if (window.pokeDexApp && window.pokeDexApp.goToDetails) {
			window.pokeDexApp.goToDetails(pokemonId);
		} else {
			window.location.href = `detalhes.html?id=${pokemonId}`;
		}
	}
}

// ========================================
// üè≠ FACTORY FUNCTIONS PARA FACILITAR USO
// ========================================

/**
 * üè≠ Cria m√∫ltiplos cards de Pok√©mon
 * * * Utiliza a classe PokemonCard para criar inst√¢ncias de cards
 * * * Recebe uma lista de Pok√©mon e retorna um array de componentes PokemonCard
 * * * Facilita a cria√ß√£o de m√∫ltiplos cards sem precisar instanciar manualmente
 * * * √ötil para renderizar listas de Pok√©mon na home
 * @param {Array} pokemonList - Lista de Pok√©mon
 * @returns {Array} Array de componentes PokemonCard
 */
export function createPokemonCards(pokemonList) {
	return pokemonList.map((pokemon) => new PokemonCard(pokemon));
}

/**
 * üé® Renderiza m√∫ltiplos cards em um container
 * * * Utiliza a fun√ß√£o createPokemonCards para criar os componentes
 * * * Insere os cards no container especificado
 * * * Retorna um array de componentes criados
 * * * Facilita a renderiza√ß√£o de listas de Pok√©mon na home
 * @param {Array} pokemonList - Lista de Pok√©mon
 * @param {Element|string} container - Container onde renderizar
 * @returns {Array} Array de componentes criados
 */
export function renderPokemonCards(pokemonList, container) {
	const containerElement =
		typeof container === "string" ? DOMUtils.findElement(container) : container;

	if (!containerElement) {
		console.error("‚ùå Container n√£o encontrado para renderizar cards");
		return [];
	}

	const cards = createPokemonCards(pokemonList);

	cards.forEach((card) => {
		card.mount(containerElement);
	});

	console.log(`‚úÖ ${cards.length} cards de Pok√©mon renderizados`);
	return cards;
}

// ========================================
// üì§ EXPORTA√á√ïES
// ========================================

export { PokemonCard };
export default PokemonCard;
