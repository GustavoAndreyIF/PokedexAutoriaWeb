/**
 * ========================================
 * STATS TAB - Componente de Estat√≠sticas do Pok√©mon
 * ========================================
 * 
 * Este componente √© respons√°vel por exibir as estat√≠sticas base do Pok√©mon
 * em formato visual com barras de progresso e valores num√©ricos.
 * 
 * FUNCIONALIDADES:
 * - Fetch e cache de dados de estat√≠sticas
 * - Renderiza√ß√£o de barras de progresso responsivas
 * - Formata√ß√£o de nomes e valores
 * - Tratamento de erros espec√≠fico
 * 
 * DADOS EXIBIDOS:
 * - HP (Health Points)
 * - Attack (Ataque)
 * - Defense (Defesa)
 * - Special Attack (Ataque Especial)
 * - Special Defense (Defesa Especial)
 * - Speed (Velocidade)
 * 
 * @author Gustavo Andrey
 * @version 1.0.0
 * @since 2025-07-21
 * 
 * @example
 * // Uso b√°sico
 * const statsTab = new StatsTab(25, "https://pokeapi.co/api/v2/pokemon/25");
 * await statsTab.render(document.getElementById("stats-content"));
 */

import { PokemonTypes, TextFormatter } from "../../utils/index.js";

/**
 * Componente especializado para exibir estat√≠sticas base do Pok√©mon.
 * 
 * Implementa o padr√£o de componente de aba definido no sistema modular,
 * sendo respons√°vel por seu pr√≥prio ciclo de vida de dados e renderiza√ß√£o.
 * 
 * @class StatsTab
 * @implements {TabComponent} Interface impl√≠cita para componentes de aba
 */
export class StatsTab {
	/**
	 * Cria uma nova inst√¢ncia do componente de estat√≠sticas.
	 * 
	 * @param {number|string} pokemonId - ID √∫nico do Pok√©mon (1-1010+)
	 * @param {string} pokemonUrl - URL completa da API do Pok√©mon
	 * 
	 * @example
	 * const statsTab = new StatsTab(1, "https://pokeapi.co/api/v2/pokemon/1");
	 * const pikachuStats = new StatsTab("pikachu", "https://pokeapi.co/api/v2/pokemon/pikachu");
	 */
	constructor(pokemonId, pokemonUrl) {
		/** @type {number|string} ID do Pok√©mon para refer√™ncia e logs */
		this.pokemonId = pokemonId;
		
		/** @type {string} URL da PokeAPI para buscar dados do Pok√©mon */
		this.pokemonUrl = pokemonUrl;
		
		/** 
		 * @type {Array<StatData>|null} Cache dos dados de estat√≠sticas processados
		 * @private
		 */
		this.statsData = null;
	}

	/**
	 * Busca e processa os dados de estat√≠sticas do Pok√©mon da PokeAPI.
	 * 
	 * FUNCIONAMENTO DO CACHE:
	 * - Na primeira chamada, faz requisi√ß√£o HTTP e processa dados
	 * - Chamadas subsequentes retornam dados do cache
	 * - Cache permanece v√°lido durante toda a sess√£o
	 * 
	 * PROCESSAMENTO DOS DADOS:
	 * - Extrai apenas os campos necess√°rios (name, base_stat)
	 * - Formata nomes para exibi√ß√£o (snake_case ‚Üí Title Case)
	 * - Valida integridade dos dados recebidos
	 * 
	 * @async
	 * @method fetchData
	 * @returns {Promise<Array<StatData>>} Array com dados processados das estat√≠sticas
	 * 
	 * @throws {Error} Erro HTTP da API ou dados inv√°lidos
	 * 
	 * @example
	 * const statsTab = new StatsTab(25, "https://pokeapi.co/api/v2/pokemon/25");
	 * try {
	 *   const stats = await statsTab.fetchData();
	 *   console.log("Stats do Pikachu:", stats);
	 *   // Output: [{ name: "hp", value: 35 }, { name: "attack", value: 55 }, ...]
	 * } catch (error) {
	 *   console.error("Erro ao buscar stats:", error);
	 * }
	 * 
	 * @typedef {Object} StatData
	 * @property {string} name - Nome da estat√≠stica (hp, attack, defense, etc.)
	 * @property {number} value - Valor base da estat√≠stica (0-255)
	 */
	async fetchData() {
		// ========================================
		// VERIFICA√á√ÉO DE CACHE
		// ========================================
		// Retorna dados em cache para evitar requisi√ß√µes desnecess√°rias
		if (this.statsData) return this.statsData;

		try {
			// ========================================
			// REQUISI√á√ÉO HTTP
			// ========================================
			const response = await fetch(this.pokemonUrl);
			if (!response.ok) {
				throw new Error(`Erro HTTP: ${response.status}`);
			}

			const pokemonData = await response.json();

			// ========================================
			// VALIDA√á√ÉO DOS DADOS
			// ========================================
			if (!pokemonData.stats || !Array.isArray(pokemonData.stats)) {
				throw new Error("Dados de estat√≠sticas n√£o encontrados ou inv√°lidos");
			}

			// ========================================
			// PROCESSAMENTO E CACHE
			// ========================================
			// Extrai apenas os dados necess√°rios e os armazena em cache
			this.statsData = pokemonData.stats.map((stat) => ({
				name: stat.stat.name,
				value: stat.base_stat,
			}));

			console.log(
				`üìä Stats carregados para ID ${this.pokemonId}:`,
				this.statsData
			);
			return this.statsData;
			
		} catch (error) {
			console.error(`‚ùå Erro ao carregar stats:`, error);
			throw error;
		}
	}

	/**
	 * Renderiza o componente de estat√≠sticas no container fornecido.
	 * 
	 * ESTRUTURA VISUAL GERADA:
	 * - T√≠tulo da se√ß√£o com √≠cone
	 * - Lista de estat√≠sticas com barras de progresso
	 * - Badges com valores num√©ricos
	 * - Layout responsivo com Bootstrap
	 * 
	 * C√ÅLCULOS VISUAIS:
	 * - Percentual da barra: (valor / 180) * 100 (180 √© considerado valor alto)
	 * - Cores: gradiente baseado no tipo do Pok√©mon
	 * - Altura das barras: 8px para melhor visualiza√ß√£o
	 * 
	 * RESPONSIVIDADE:
	 * - Funciona em mobile, tablet e desktop
	 * - Barras se ajustam ao container
	 * - Texto leg√≠vel em todos os tamanhos
	 * 
	 * @async
	 * @method render
	 * @param {HTMLElement} container - Elemento DOM onde inserir o conte√∫do
	 * @returns {Promise<void>} Promise que resolve quando a renderiza√ß√£o estiver completa
	 * 
	 * @throws {Error} Erro ao buscar dados ou renderizar
	 * 
	 * @example
	 * const container = document.getElementById("stats-content");
	 * const statsTab = new StatsTab(25, "https://pokeapi.co/api/v2/pokemon/25");
	 * 
	 * try {
	 *   await statsTab.render(container);
	 *   console.log("Estat√≠sticas renderizadas com sucesso!");
	 * } catch (error) {
	 *   console.error("Erro na renderiza√ß√£o:", error);
	 * }
	 */
	async render(container) {
		try {
			// ========================================
			// CARREGAMENTO DE DADOS
			// ========================================
			// Garante que os dados estejam dispon√≠veis antes da renderiza√ß√£o
			await this.fetchData();

			// ========================================
			// GERA√á√ÉO DE HTML DAS ESTAT√çSTICAS
			// ========================================
			// Cria uma barra de progresso para cada estat√≠stica
			const statsList = this.statsData
				.map((stat) => {
					// Formata√ß√£o do nome da estat√≠stica
					const statName = TextFormatter.capitalize(
						stat.name.replace("-", " ")
					);
					
					// C√°lculo do percentual para a barra (m√°ximo considerado: 180)
					const percentage = Math.min((stat.value / 180) * 100, 100);
					
					// Cor prim√°ria do gradiente (usando cor padr√£o por enquanto)
					const primaryColor = PokemonTypes.getTypeColor("normal");

					return `
						<div class="mb-3">
							<!-- Nome e valor da estat√≠stica -->
							<div class="d-flex justify-content-between mb-1">
								<small class="fw-bold">${statName}</small>
								<small class="badge bg-secondary">${stat.value}</small>
							</div>
							
							<!-- Barra de progresso -->
							<div class="progress" style="height: 8px; border-radius: 4px;">
								<div class="progress-bar" 
									 style="width: ${percentage}%; background: linear-gradient(90deg, ${primaryColor}66, ${primaryColor});"
									 role="progressbar" 
									 aria-valuenow="${stat.value}" 
									 aria-valuemin="0" 
									 aria-valuemax="180"
									 aria-label="${statName}: ${stat.value} pontos">
								</div>
							</div>
						</div>
					`;
				})
				.join("");

			// ========================================
			// RENDERIZA√á√ÉO FINAL
			// ========================================
			// Insere o HTML completo no container fornecido
			container.innerHTML = `
				<h5 class="fw-semibold mb-3">‚ö° Estat√≠sticas Base</h5>
				<div class="stats-container">
					${statsList}
				</div>
				
				<!-- Informa√ß√£o adicional -->
				<div class="mt-3">
					<small class="text-muted">
						<i class="bi bi-info-circle me-1"></i>
						Estat√≠sticas base do Pok√©mon no n√≠vel 50
					</small>
				</div>
			`;

		} catch (error) {
			// ========================================
			// TRATAMENTO DE ERRO ESPEC√çFICO
			// ========================================
			// Exibe uma mensagem de erro amig√°vel espec√≠fica para esta aba
			container.innerHTML = `
				<div class="alert alert-danger" role="alert">
					<h6 class="alert-heading">‚ùå Erro ao carregar estat√≠sticas</h6>
					<p class="mb-0">${error.message}</p>
					<hr>
					<button class="btn btn-outline-danger btn-sm mt-2" onclick="location.reload()">
						<i class="bi bi-arrow-clockwise me-1"></i>Recarregar p√°gina
					</button>
				</div>
			`;
			console.error("‚ùå Erro na renderiza√ß√£o do StatsTab:", error);
		}
	}
}
