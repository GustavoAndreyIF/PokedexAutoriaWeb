// ============================================================================
// POKEMON DETAILS HEADER - M√ìDULO DE √ÅUDIO
// ============================================================================

import { DOMUtils } from "../../utils/index.js";

/**
 * M√≥dulo respons√°vel pelo controle de √°udio e reprodu√ß√£o de cries
 *
 * Este m√≥dulo cont√©m:
 * - Reprodu√ß√£o de cries do Pok√©mon
 * - Controle de indicadores visuais de √°udio
 * - Gerenciamento de estado de reprodu√ß√£o
 * - Anima√ß√µes do sprite durante reprodu√ß√£o
 *
 * @module AudioHeader
 * @author Projeto Pok√©dex
 * @version 1.0.0
 */

/**
 * Classe para gerenciar √°udio do PokemonDetailsHeader
 */
export class AudioHeader {
	/**
	 * Exibe o indicador visual de reprodu√ß√£o de √°udio
	 *
	 * Ativa a anima√ß√£o do indicador quando o √°udio do cry est√° sendo reproduzido.
	 * O indicador fornece feedback visual ao usu√°rio sobre o estado do √°udio.
	 *
	 * @param {Object} data - Dados do Pok√©mon atual
	 * @returns {void}
	 *
	 * @example
	 * // Ao clicar no bot√£o de play do cry:
	 * AudioHeader.showAudioIndicator(this.data); // Mostra anima√ß√£o de ondas sonoras
	 */
	static showAudioIndicator(data) {
		const audioIndicator = DOMUtils.findElement("audio-indicator");

		if (audioIndicator && data) {
			audioIndicator.style.opacity = "1";
		}
	}

	/**
	 * Oculta o indicador visual de reprodu√ß√£o de √°udio
	 *
	 * Remove a anima√ß√£o do indicador quando o √°udio termina ou √© pausado.
	 * Restaura o estado visual padr√£o da interface.
	 *
	 * @param {boolean} isPlayingAudio - Estado atual do √°udio
	 * @returns {void}
	 *
	 * @example
	 * // Quando o √°udio termina ou √© pausado:
	 * AudioHeader.hideAudioIndicator(false); // Remove anima√ß√£o
	 */
	static hideAudioIndicator(isPlayingAudio) {
		const audioIndicator = DOMUtils.findElement("audio-indicator");
		if (audioIndicator) {
			// Esconder com transi√ß√£o
			audioIndicator.style.opacity = "0";
			audioIndicator.style.transform = "translate(50%, -50%) scale(1)";

			// Esconder completamente ap√≥s a transi√ß√£o
			setTimeout(() => {
				if (audioIndicator && !isPlayingAudio) {
					audioIndicator.style.display = "none";
				}
			}, 300);
		}
	}

	/**
	 * Reproduz o √°udio do cry do Pok√©mon com controle de estado
	 *
	 * Gerencia a reprodu√ß√£o do som caracter√≠stico do Pok√©mon:
	 * - Previne reprodu√ß√µes sobrepostas
	 * - Controla indicadores visuais (sprite e audio indicator)
	 * - Gerencia estados de loading e erro
	 * - Limpa recursos automaticamente
	 *
	 * Fluxo de execu√ß√£o:
	 * 1. Verifica se j√° est√° tocando (previne sobreposi√ß√£o)
	 * 2. Valida disponibilidade de √°udio
	 * 3. Ativa indicadores visuais
	 * 4. Cria e reproduz elemento HTML5 Audio
	 * 5. Limpa estado ao finalizar/falhar
	 *
	 * @param {Object} context - Contexto do PokemonDetailsHeader contendo:
	 *   - isPlayingAudio: estado atual do √°udio
	 *   - audioUrl: URL do arquivo de √°udio
	 *   - data: dados do Pok√©mon
	 * @param {Function} updateIsPlayingAudio - Fun√ß√£o para atualizar o estado isPlayingAudio
	 * @returns {Promise<boolean>} true se reproduziu com sucesso, false caso contr√°rio
	 * @throws {Error} Em caso de falha na reprodu√ß√£o
	 *
	 * @example
	 * // Ao clicar no sprite do Pok√©mon:
	 * const success = await AudioHeader.playPokemonCry({
	 *   isPlayingAudio: this.isPlayingAudio,
	 *   audioUrl: this.audioUrl,
	 *   data: this.data
	 * }, (newState) => { this.isPlayingAudio = newState; });
	 * if (success) console.log('Cry reproduzido!');
	 */
	static async playPokemonCry(context, updateIsPlayingAudio) {
		// Verificar se √°udio j√° est√° tocando
		if (context.isPlayingAudio) {
			console.log(
				`üîä √Åudio de ${context.data.name} j√° est√° tocando, ignorando nova tentativa`
			);
			return false;
		}

		if (!context.audioUrl) {
			console.log(`üîá Nenhum √°udio dispon√≠vel para ${context.data.name}`);
			return false;
		}

		const sprite = DOMUtils.findElement("pokemon-main-sprite");

		try {
			// Marcar como tocando ANTES de mostrar o indicator
			updateIsPlayingAudio(true);
			console.log(`üîä Tocando √°udio de ${context.data.name}:`, context.audioUrl);

			// Mostrar indicador visual imediatamente
			AudioHeader.showAudioIndicator(context.data);

			// Adicionar classe de √°udio tocando no sprite
			if (sprite) {
				sprite.classList.add("audio-playing");
			}

			// Criar e tocar √°udio
			const audio = new Audio(context.audioUrl);
			audio.volume = 0.6; // Volume moderado

			// Promise para aguardar o √°udio terminar
			await new Promise((resolve, reject) => {
				audio.onended = () => {
					console.log(`‚úÖ √Åudio de ${context.data.name} finalizado`);

					// Marcar como n√£o tocando ANTES de esconder
					updateIsPlayingAudio(false);

					// Esconder indicador imediatamente quando √°udio termina
					AudioHeader.hideAudioIndicator(false);

					// Remover classe de √°udio tocando do sprite
					if (sprite) {
						sprite.classList.remove("audio-playing");
					}

					resolve();
				};

				audio.onerror = (error) => {
					console.error(
						`‚ùå Erro ao tocar √°udio de ${context.data.name}:`,
						error
					);

					// Marcar como n√£o tocando ANTES de esconder
					updateIsPlayingAudio(false);

					// Esconder indicador em caso de erro
					AudioHeader.hideAudioIndicator(false);

					// Remover classe de √°udio tocando do sprite
					if (sprite) {
						sprite.classList.remove("audio-playing");
					}

					reject(error);
				};

				// Iniciar reprodu√ß√£o
				audio.play().catch(reject);
			});

			return true;
		} catch (error) {
			console.error(
				`‚ùå Erro ao reproduzir √°udio de ${context.data.name}:`,
				error
			);

			// Limpar estados em caso de erro
			updateIsPlayingAudio(false);
			AudioHeader.hideAudioIndicator(false);

			if (sprite) {
				sprite.classList.remove("audio-playing");
			}

			return false;
		}
	}
}
